version: "3.8"

networks:
  order:
    driver: bridge

services:

  order-mysql:
    image: mysql/mysql-server:8.0.27
    hostname: mysql
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - ./mysql/mysql.cnf:/etc/mysql/conf.d
      - ./mysql/mysql_bootstrap.sql:/docker-entrypoint-initdb.d/mysql_bootstrap.sql
      - ./mysql/data:/var/lib/mysql-files/data
    healthcheck: {test: mysql -pdebezium -e 'select 1', interval: 1s, start_period: 120s}
    networks:
      - order

  order-postgres:
    build: docker-conf/postgres
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: dbpass
      POSTGRES_USER: dbuser
      PGTZ: Europe/Amsterdam
      ORDER_DB_USER: orderdbuser
      ORDER_DB_PASSWORD: dbpass
      ORDER_DB_NAME: orderdb
      PRODUCT_DB_USER: productdbuser
      PRODUCT_DB_PASSWORD: dbpass
      PRODUCT_DB_NAME: productdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dbuser" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - order

  order-zookeeper:
    image: debezium/zookeeper:2.2
    container_name: order-zookeeper
    restart: always
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    environment:
      JMXPORT: 9010
      JMXHOST: order-zookeeper
    volumes:
      - ./volumes/zookeeper/data:/zookeeper/data
      - ./volumes/zookeeper/txns:/zookeeper/txns
      - ./volumes/zookeeper/log:/zookeeper/logs
      - ./volumes/zookeeper/conf:/zookeeper/conf
    networks:
      - order

  order-kafka1:
    image: debezium/kafka:2.2
    container_name: order-kafka1
    restart: always
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      ZOOKEEPER_CONNECT: "order-zookeeper:2181"
      BOOTSTRAP_SERVERS: "order-kafka1:29092,order-kafka2:29093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://order-kafka1:29092,PLAINTEXT_HOST://localhost:9092
      BROKER_ID: 1
      ADVERTISED_HOST_NAME: order-kafka1
      JMXPORT: 9011
      JMXHOST: order-kafka1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_COMPRESSION_TYPE: producer
    depends_on:
      - order-zookeeper
    volumes:
      - ./volumes/kafka/kafka-1/data:/kafka/data
      - ./volumes/kafka/kafka-1/log:/kafka/log
      - ./volumes/kafka/kafka-1/config:/kafka/config
    networks:
      - order

  order-kafka2:
    image: debezium/kafka:2.2
    container_name: order-kafka2
    restart: always
    ports:
      - 9093:9093
      - 29093:29093
    environment:
      ZOOKEEPER_CONNECT: "order-zookeeper:2181"
      BOOTSTRAP_SERVERS: "order-kafka1:29092,order-kafka2:29093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://order-kafka2:29093,PLAINTEXT_HOST://localhost:9093
      BROKER_ID: 2
      ADVERTISED_HOST_NAME: order-kafka2
      JMXPORT: 9011
      JMXHOST: order-kafka2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_COMPRESSION_TYPE: producer
    depends_on:
      - order-zookeeper
    volumes:
      - ./volumes/kafka/kafka-2/data:/kafka/data
      - ./volumes/kafka/kafka-2/log:/kafka/log
      - ./volumes/kafka/kafka-2/config:/kafka/config
    networks:
      - order

  order-connect:
    image: debezium/connect:2.2
    container_name: order-connect
    restart: always
    ports:
      - 8083:8083
    healthcheck: {test: curl -f localhost:8083, interval: 1s, start_period: 120s}
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: "order-kafka1:29092,order-kafka2:29093"
      JMXPORT: 9012
      JMXHOST: order-connect
    depends_on:
      - order-kafka1
      - order-kafka2
    networks:
      - order

  debezium_deploy:
    image: debezium/connect:2.2
    depends_on:
      order-connect: {condition: service_healthy}
    environment:
      KAFKA_ADDR: order-kafka1:29092
    volumes:
      - ./debezium/register_mysql.sh:/register_mysql.sh
    entrypoint: [bash, -c, /register_mysql.sh]
    networks:
      - order

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8070:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "order-kafka1:29092,order-kafka2:29093"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "order-zookeeper:2181"
      KAFKA_CLUSTERS_0_METRICS_PORT: 9011
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: order-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://order-connect:8083
    networks:
      - order